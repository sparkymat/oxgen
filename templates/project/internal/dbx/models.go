// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package dbx

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Gender string

const (
	GenderMale   Gender = "male"
	GenderFemale Gender = "female"
	GenderOther  Gender = "other"
)

func (e *Gender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Gender(s)
	case string:
		*e = Gender(s)
	default:
		return fmt.Errorf("unsupported scan type for Gender: %T", src)
	}
	return nil
}

type NullGender struct {
	Gender Gender
	Valid  bool // Valid is true if Gender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGender) Scan(value interface{}) error {
	if value == nil {
		ns.Gender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Gender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Gender), nil
}

type RelationType string

const (
	RelationTypeMarried  RelationType = "married"
	RelationTypeDomestic RelationType = "domestic"
	RelationTypeCasual   RelationType = "casual"
	RelationTypeOther    RelationType = "other"
)

func (e *RelationType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RelationType(s)
	case string:
		*e = RelationType(s)
	default:
		return fmt.Errorf("unsupported scan type for RelationType: %T", src)
	}
	return nil
}

type NullRelationType struct {
	RelationType RelationType
	Valid        bool // Valid is true if RelationType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRelationType) Scan(value interface{}) error {
	if value == nil {
		ns.RelationType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RelationType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRelationType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RelationType), nil
}

type Partnership struct {
	ID           uuid.UUID
	Partner1ID   uuid.UUID
	Partner2ID   uuid.UUID
	RelationType RelationType
	IsActive     pgtype.Bool
	StartedAt    pgtype.Date
	EndedAt      pgtype.Date
	CreatedAt    pgtype.Timestamp
	UpdatedAt    pgtype.Timestamp
}

type Person struct {
	ID                  uuid.UUID
	Name                string
	Dob                 pgtype.Date
	Dod                 pgtype.Date
	IsDead              pgtype.Bool
	Gender              NullGender
	CurrentLocation     pgtype.Text
	AvatarFilePath      pgtype.Text
	CreatedAt           pgtype.Timestamp
	UpdatedAt           pgtype.Timestamp
	ParentPartnershipID uuid.NullUUID
}

type SchemaMigration struct {
	Version int64
	Dirty   bool
}

type User struct {
	ID                uuid.UUID
	Name              string
	Username          string
	EncryptedPassword string
	CreatedAt         pgtype.Timestamp
	UpdatedAt         pgtype.Timestamp
}
